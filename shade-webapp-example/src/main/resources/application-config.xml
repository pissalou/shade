<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright (C) 2013 Pascal Mazars
  ~ This program is free software: you can redistribute it and/or modify
  ~ it under the terms of the GNU General Public License as published by
  ~ the Free Software Foundation, either version 3 of the License, or
  ~ (at your option) any later version.
  ~
  ~ This program is distributed in the hope that it will be useful,
  ~ but WITHOUT ANY WARRANTY; without even the implied warranty of
  ~ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ~ GNU General Public License for more details.
  ~
  ~ You should have received a copy of the GNU General Public License
  ~ along with this program.  If not, see <http://www.gnu.org/licenses/>.
  -->

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.5.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.0.xsd"
       default-lazy-init="false">

    <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath:application.properties</value>
            </list>
        </property>
    </bean>

    <!-- Forcing Spring to use CGLIB to we can annotate interfaces with @Transactional -->
    <aop:config proxy-target-class="true" />

    <!-- enable the configuration of transactional behavior based on annotations -->
    <tx:annotation-driven transaction-manager="transactionManager"/>

    <context:component-scan base-package="app.core" />
    <!--<bean id="db" class="app.core.Db">-->
        <!--<constructor-arg ref="sessionFactory" />-->
    <!--</bean>-->
    <!--<bean id="dao" class="app.core.Dao" scope="singleton">-->
        <!--<constructor-arg ref="sessionFactory" />-->
    <!--</bean>-->
    <!-- To gain access to the applicationContext statically via ApplicationContextProvider.ctx -->
    <!--<bean id="applicationContextProvider" class="app.core.ApplicationContextProvider" lazy-init="false" />-->

    <!-- so we get the transactional context intercepted, context:component-scan does not work in spring 2.5 https://jira.springsource.org/browse/SPR-5082 -->
    <!--<bean id="abstractCRUDService" class="app.service.AbstractCRUDService" />-->
    <!--<bean id="userService" class="app.service.UserService" />-->
    <context:component-scan base-package="app.service" />

    <!--<bean id="dao" class="app.core.Dao" />-->

    <!--<bean id="emf" class="org.springframework.orm.jpa.LocalEntityManagerFactoryBean">-->
       <!--<property name="persistenceUnitName" value="persistenceUnit"/>-->
    <!--</bean>-->

    <!-- should it be a singleton? we don't need more than one -->
    <bean id="sessionFactory" class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean" scope="singleton">
        <property name="dataSource" ref="dataSource" />
        <!--<property name="configurationClass" value="org.hibernate.cfg.AnnotationConfiguration" />-->
        <property name="packagesToScan" value="app.core" />
         <!--<property name="annotatedClasses">-->
        <!--<list>-->
            <!--<value>app.core.User</value>-->
            <!--<value>app.core.Person</value>-->
        <!--</list>-->
        <!--</property>-->
        <property name="hibernateProperties">
                <value>
                    hibernate.dialect=org.hibernate.dialect.HSQLDialect
                    hibernate.hbm2ddl.auto=create
                </value>
        </property>
    </bean>

    <!--<import resource="db-config.xml" />-->
  <!--<bean id="entityManagerFactory" class="org.springframework.orm.jpa.ContainerEntityManagerFactoryBean">-->
    <!--<property name="dataSource" ref="dataSource"/>-->
    <!--<property name="jpaVendorAdapter">-->
      <!--<bean class="org.springframework.orm.jpa.vendor.TopLinkJpaVendorAdapter">-->
        <!--<property name="showSql" value="true"/>-->
        <!--<property name="generateDdl" value="true"/>-->
        <!--<property name="databasePlatform" value="oracle.toplink.essentials.platform.database.HSQLPlatform"/>-->
      <!--</bean>-->
    <!--</property>-->
    <!--<property name="loadTimeWeaver">-->
      <!--<bean class="org.springframework.instrument.classloading.SimpleLoadTimeWeaver"/>-->
    <!--</property>-->
  <!--</bean>-->

  <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
    <property name="driverClassName" value="org.hsqldb.jdbcDriver"/>
    <property name="url" value="jdbc:hsqldb:mem:mem:aname"/>
    <property name="username" value="sa"/>
    <property name="password" value=""/>
  </bean>

  <!-- best choice JTA? -->
  <!--<bean id="transactionManager" class="org.springframework.transaction.jta.JtaTransactionManager"/>-->
  <!--<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">-->
      <!--<property name="entityManagerFactory" ref="emf"/>-->
  <!--<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">-->
      <!--<property name="dataSource" ref="dataSource"/>-->
  <!--</bean>-->
  <bean id="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
    <property name="sessionFactory" ref="sessionFactory" />
  </bean>


  <!-- turn on @PersistenceUnit and @PersistenceContext annotation support -->
  <bean class="org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor" />

  <bean id="jdbc" class="org.springframework.jdbc.core.JdbcTemplate" autowire="constructor" />
</beans>